# import system libraries
import time
from numpy import arange
# import Adafruit Blinka
from board import SCL, SDA
import busio
# import the adafruit_motor library
from adafruit_motor import servo
# Import the PCA9685 module. Available in the bundle and here:
#   https://github.com/adafruit/Adafruit_CircuitPython_PCA9685
from adafruit_pca9685 import PCA9685

from adafruit_servokit import ServoKit

i2c = busio.I2C(SCL, SDA)

# Create a simple PCA9685 class instance.
pca = PCA9685(i2c)
# You can optionally provide a finer tuned reference clock speed to improve the$
# timing pulses. This calibration will be specific to each board and its enviro$
# calibration.py example in the PCA9685 driver.
# pca = PCA9685(i2c, reference_clock_speed=25630710)
pca.frequency = 60

# Open all channels on the PCA
kit = ServoKit(channels=16)

# define tilt or pan for each servos
# tilt=90

# pan=0
# kit.servo[0].angle=pan
# kit.servo[1].angle=pan
# kit.servo[2].angle=pan
# kit.servo[3].angle=pan
# kit.servo[0].angle=tilt
# kit.servo[1].angle=tilt
# kit.servo[2].angle=tilt
# kit.servo[3].angle=tilt

# basic movements
step = 1
for i in arange(90, 130,step):
    kit.servo[0].angle = i
    time.sleep(0.06*step)

for k in arange(90, 50, -step):
    kit.servo[1].angle = k
    kit.servo[2].angle = k
    kit.servo[3].angle = k
    time.sleep(0.06*step)

for i in arange(130, 50, -step):
    kit.servo[0].angle = i
    time.sleep(.06*step)

for k in arange(50, 130,step):
    kit.servo[1].angle = k
    kit.servo[2].angle = k
    kit.servo[3].angle = k
    time.sleep(.06*step)

    #movement back to centre
for i in arange(50, 90,step):
    kit.servo[0].angle = i
    time.sleep(0.06*step)

for k in arange(130, 90, -step):
    kit.servo[1].angle = k
    kit.servo[2].angle = k
    kit.servo[3].angle = k
    time.sleep(0.06*step)


#T-pose servos at 90
while True:
    kit.servo[0].angle = 90
    kit.servo[1].angle = 90
    kit.servo[2].angle = 90
    kit.servo[3].angle = 90

#pca.deinit()
