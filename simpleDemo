# import system libraries
import time
# import Adafruit Blinka
from board import SCL, SDA
import busio
# import the adafruit_motor library
from adafruit_motor import servo
# Import the PCA9685 module. Available in the bundle and here:
#   https://github.com/adafruit/Adafruit_CircuitPython_PCA9685
from adafruit_pca9685 import PCA9685

from adafruit_servokit import ServoKit

i2c = busio.I2C(SCL, SDA)

# Create a simple PCA9685 class instance.
pca = PCA9685(i2c)
# You can optionally provide a finer tuned reference clock speed to improve the accuracy of the
# timing pulses. This calibration will be specific to each board and its environment. See the
# calibration.py example in the PCA9685 driver.
# pca = PCA9685(i2c, reference_clock_speed=25630710)
pca.frequency = 60

#Open all channels on the PCA
kit=ServoKit(channels=16)

#define tilt or pan for each servos
tilt=125
#pan=0
#kit.servo[0].angle=pan
#kit.servo[1].angle=pan
#kit.servo[2].angle=pan
#kit.servo[3].angle=pan
kit.servo[0].angle = - tilt
kit.servo[1].angle = tilt
kit.servo[2].angle = tilt
kit.servo[3].angle = tilt

#basic movements
#L1
for i in range(120):
    kit.servo[0].angle = i
    time.sleep(.01)
#R1
for j in range(90,140,-1):
    kit.servo[1].angle = j
    time.sleep(.06)
#L2 and R2 
for i in range(90,50,-1):
    kit.servo[2].angle = i
    kit.servo[3].angle = i
    time.sleep(.06)
#L1    
for i in range(90, 140,-1):
    kit.servo[0].angle = i
#R1
for j in range(90, 140):
    kit.servo[1].angle= j
    time.sleep(.06)#
#L2 and R2 
for i in range(90,50):
    kit.servo[2].angle=i
    kit.servo[3].angle=i
    time.sleep(.06)
    continue
#L1
for i in range(90, 140):
    kit.servo[0].angle = i
#R1
for j in range(90, 140, -1):
    kit.servo[1].angle = j
    time.sleep(.06)

#T-pose servos at 90
while True:
    kit.servo[0].angle = 90
    kit.servo[1].angle = 90
    kit.servo[2].angle = 90
    kit.servo[3].angle = 90
