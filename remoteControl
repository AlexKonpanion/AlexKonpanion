lines (135 sloc) 3.51 KB
import usb.core, usb.util, usb.control
import array
from time import gmtime, strftime
from motorcontroller import MotorController


#remoteLog = open('/home/pi/temp/remote.log','w')

# defines the USB IR Remote from OSMC
dev = usb.core.find(idVendor=0x2252, idProduct=0x1037)
motors = MotorController()
actions = {}
temp_actions = {}
execute = None

def pressHome():
    global actions 
    global temp_actions
    global motors

    actions= {}
    temp_actions = {}
    motors = MotorController()
    return

def pressInfo():
    motors.move_tpose()
    return

def pressUp():
#    print('Up')
    for act in actions:
      if actions[act]:
        motors.move_servo(act,16)
    return

def pressRight():
    return

def pressDown():
#    print('Down')
    for act in actions:
      if actions[act]:
        motors.move_servo(act,-16)
    return

def pressLeft():
    return

def pressOk():
    global actions
    global temp_actions
    actions = temp_actions
    temp_actions = {}
    return

def set_actions(key):
    if key in temp_actions.keys():
      temp_actions[key] = -temp_actions[key]
    else:
      temp_actions[key] = 1

def pressExit():
    self.motors.play_sequence()

def pressMenu():
    self.motors.switch_sequence()

def pressPlay():
    set_actions(0)
    return

def pressStop():
    set_actions(1)
    return

def pressBack():
    set_actions(2)
    return

def pressForward():
    set_actions(3)
    return

def liftFinger():
#    print('release')
    return

def remoteInput(array, position):
    global execute
    signal = int(array[position])

#    if signal==0:
#      return

    time = strftime("%Y-%m-%d %H:%M:%S", gmtime()) 
#    remoteLog.write(time + " encoded key: " + str(signal) + "\n")
    switch = {
      74: pressHome,
      96: pressInfo,
      82: pressUp,
      79: pressRight,
      81: pressDown,
      80: pressLeft,
      40: pressOk,
      36: pressExit,
       8: pressMenu,
     205: pressPlay,
      38: pressStop,
     180: pressBack,
     179: pressForward,
       0: liftFinger,
    }

    func = switch.get(signal)
    execute = func
    return
 
try:
    if dev is None:
        raise ValueError('device not found')

    cfg = dev.get_active_configuration()

    interface_number1 = cfg[(0,0)].bInterfaceNumber  # used for the first interface
    interface_number2 = cfg[(1,0)].bInterfaceNumber  # used for the second interface
    intf1 = usb.util.find_descriptor(
        cfg, bInterfaceNumber=interface_number1)
    intf2 = usb.util.find_descriptor(
	cfg, bInterfaceNumber=interface_number2) 

    if dev.is_kernel_driver_active(interface_number1):
        dev.detach_kernel_driver(interface_number1)
    if dev.is_kernel_driver_active(interface_number2):
	dev.detach_kernel_driver(interface_number2)

    ep1 = usb.util.find_descriptor(
        intf1,
        custom_match=lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_IN)
    ep2 = usb.util.find_descriptor(
	intf2,
	custom_match=lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_IN)
    while True:
        release = 0
        try:
            # lsusb -v : find wMaxPacketSize (8 in my case)
            remote1 = ep1.read(3, timeout=50)
	    remoteInput(remote1,2)
        except usb.core.USBError:
	    pass
	try:
	    remote2 = ep2.read(3, timeout=50)
	    remoteInput(remote2,1)
        except usb.core.USBError:
            pass
        if execute != None:
          execute()
        if execute not in [pressUp,pressDown]:
          execute = None
#	remoteLog.flush()
except:
#    remoteLog.close()
    raise
